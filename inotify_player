#!/usr/bin/env python3
#

import sys
from optparse import OptionParser
from pathlib import Path
import json
import inotify.adapters
import inotify.constants
import subprocess
import _thread
from queue import Queue
import datetime
import time
try:
    import bluepy.btle as btle
    bluepy = True
except ImportError:
    bluepy = False


def reset_bluetooth(iface):
    subprocess.run(
            ["sudo", "hciconfig", "hci" + str(iface), "reset"],
            stdout=subprocess.DEVNULL,
            stderr=subprocess.STDOUT
            )


def send_notification(mac, iface, notify_bytes):
    try:
        p = btle.Peripheral(mac, addrType=btle.ADDR_TYPE_RANDOM, iface=iface)
        # print("connected")
    except Exception as e:
        # print(e)
        # print("connect block")
        return False

    try:
        p.setMTU(200)
        # p.setSecurityLevel(level="high")
        c = p.getCharacteristics(uuid="00002a46-0000-1000-8000-00805f9b34fb")[0]
        # print("configured")
    except Exception as e:
        p.disconnect()
        # print(e)
        # print("setup block")
        return False

    try:
        c.write(notify_bytes)
        # print("notification sent")
    except Exception as e:
        # print(e)
        # print("notification failed")
        p.disconnect()
        return False

    p.disconnect()
    return True


def notification_thread(mac, iface, notify_queue):
    while True:
        notify_bytes = notify_queue.get()
        if not send_notification(mac, iface, notify_bytes):
            reset_bluetooth(iface)
            send_notification(mac, iface, notify_bytes)


def main():
    running_config = parse_config()
    read_queue = Queue()
    now_playing = Queue()
    now_playing.put({'audio': 'idle', 'start': datetime.datetime.now().timestamp(), 'srcList': [{'src': 0, 'tag': ''}], 'talkgroup_tag': 'idle'})
    notify_queue = Queue()
    notify_queue.put(bytes("\x00\x01\x00Trunk Recorder\x00Started", 'utf-8'))
    try:
        _thread.start_new_thread(inotify_thread, (running_config['captureDir'], read_queue))
    except:
        print("Error: unable to start inotify_thread")
        sys.exit(1)
    try:
        _thread.start_new_thread(play_file, (read_queue, now_playing, running_config['play']))
    except:
        print("Error: unable to start play_file_thread")
        sys.exit(1)
    if running_config['mac'] is not None:
        try:
            _thread.start_new_thread(notification_thread, (running_config['mac'], running_config['iface'], notify_queue))
        except:
            print("Error: unable to start notification_thread")
            sys.exit(1)
    while True:
        display = now_playing.get()
        # Prime the pump by displaying everything except the unit tag as that may not be known at the start of the transmission
        if display['audio'] != 'idle':
            currtime = datetime.datetime.now()
            if running_config['mac'] is not None:
                notify_bytes = bytes(F"\x00\x01\x00Trunk Recorder\x00Q:{read_queue.qsize()}\nDelay: {int((currtime - datetime.datetime.fromtimestamp(display['start'])).total_seconds())}\n{display['talkgroup_tag']}", 'utf-8')
                notify_queue.put(notify_bytes)
        show_it(display, {'src': 0, 'tag': ''}, read_queue.qsize())
        lasttime = display['start']
        for src in display['srcList']:
            if src['src'] != 0:
                sleeptime = src['time'] - lasttime
                time.sleep(sleeptime)
                lasttime = lasttime + sleeptime
                if display['audio'] != 'idle':
                    currtime = datetime.datetime.now()
                    if running_config['mac'] is not None:
                        notify_bytes = bytes(F"\x00\x01\x00Trunk Recorder\x00Q:{read_queue.qsize()}\nDelay: {int((currtime - datetime.datetime.fromtimestamp(display['start'])).total_seconds())}\n{display['talkgroup_tag']}\n{src['tag']}\n{hex(src['src'])} -> {hex(display['tid'])}", 'utf-8')
                        notify_queue.put(notify_bytes)
                show_it(display, src, read_queue.qsize())


def show_it(meta, src, q):
    print("\033c", end="")
    # print(meta)
    # print(src)
    # print(q)
    currtime = datetime.datetime.now()
    if meta['audio'] == 'idle':
        meta = {'audio': 'idle', 'freq_tag': 'idle', 'freq': '000000000', 'start': currtime.timestamp(), 'tid': '0', 'talkgroup_tag': 'idle', 'srcList': 'idle'}
    print('Last Update Time : {}'.format(currtime.strftime("%Y-%m-%d %H:%M:%S")))
    print('Recording  Time  : {}'.format(datetime.datetime.fromtimestamp(meta['start']).strftime("%Y-%m-%d %H:%M:%S")))
    print('Queue: {}\t\t    Delay: {}'.format(q, int((currtime - datetime.datetime.fromtimestamp(meta['start'])).total_seconds())))
    print('--------------------------------------')
    print('{} Hz : {}'.format(meta['freq'], meta['talkgroup_tag']))
    print('TG: {}'.format(hex(int(meta['tid']))))
    if src['tag'] == "":
        src['tag'] = "Unknown"
    print('UID: {} [{}]'.format(src['tag'], hex(src['src'])))


def parse_config():
    parser = OptionParser()
    parser.add_option("-c", "--config", dest="filename",
                      help="trunk-recorder config file", metavar="FILE")
    parser.add_option("-m", "--mac", dest="mac",
                      help="mac address of pine time for notifications")
    parser.add_option("-d", "--device", dest="hci",
                      help="bluetooth device to use to send notifications.  hci[0-9] supported, defaults to hci0")
    parser.add_option("-n", "--notify-only", action="store_false", dest="notify", default=False,
                      help="do not play audio, only show ui and send notifications")
    parser.add_option("-q", "--quiet",
                      action="store_false", dest="verbose", default=True,
                      help="don't print status messages to stdout")

    (options, args) = parser.parse_args()

    if options.filename is None:
        print("Please provide a trunk-recorder config file.")
        sys.exit(1)

    if options.hci is not None:
        iface = options.hci[-1]
    else:
        iface = 'hci0'

    if options.mac is not None:
        if not bluepy:
            print("Please install bluepy to use notification features")
            sys.exit(1)

    if options.notify is not None:
        play = False
    else:
        play = True

    path = Path(options.filename)
    if path.is_file():
        # print(f'The file {options.filename} exists, reading...')
        pass
    else:
        print(f'The file {options.filename} does not exist')
        sys.exit(1)

    config_file = open(options.filename,)
    config = json.load(config_file)
    config_file.close()
    retval = {}
    retval['captureDir'] = config['captureDir']
    retval['mac'] = options.mac
    retval['iface'] = iface
    retval['play'] = play

    return retval


def inotify_thread(capturedir, read_queue):
    # print("INOTIFY_THREAD: Setting up InotifyTree on {}...".format(capturedir))
    i = inotify.adapters.InotifyTree(
            capturedir, mask=inotify.constants.IN_CLOSE_WRITE
            )
    # print("INOTIFY_THREAD: Waiting on inotify events...")

    # while True:
    for event in i.event_gen(yield_nones=False):
        (_, type_names, path, filename) = event

        if type_names == ['IN_CLOSE_WRITE'] and filename.endswith('.m4a'):
            # print("INOTIFY_THREAD: Queuing {}/{}".format(path, filename))
            # this will need a rewrite if we support reading on modify
            media_audio = "{}/{}".format(path, filename)
            media_json = open(media_audio.replace('m4a', 'json'))
            media_meta = json.load(media_json)
            media_json.close()
            read_queue.put({"audio": media_audio, "freq": media_meta['freq'], 'talkgroup_tag': media_meta['talkgroup_tag'], "start": media_meta['start_time'], "tid": media_meta['talkgroup'], "srcList": media_meta['srcList']})
            read_queue.put({"audio": "idle", 'start': datetime.datetime.now().timestamp(), 'srcList': [{'src': 0, 'tag': ''}]})


def play_file(read_queue, now_playing, play):
    # print("PLAY_FILE_THREAD: started")
    while True:
        # print("PLAY_FILE_THREAD: Waiting for item...")
        media = read_queue.get()
        # print("PLAY_FILE_THREAD: Got a file to play, {}".format(media["audio"]))
        now_playing.put(media)
        if play:
            if media["audio"] != "idle":
                subprocess.run(
                        ["ffplay", "-hide_banner", "-autoexit", "-vn", "-nodisp", media["audio"]],
                        stdout=subprocess.DEVNULL,
                        stderr=subprocess.STDOUT
                        )


if __name__ == "__main__":
    main()
